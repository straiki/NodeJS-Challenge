#!/usr/bin/env node

if (process.argv.length > 2) {
	// CLI
	var cli = require("cli").enable("help"),
		googleImages = require('../lib/image-downloader');

	cli.parse({
		cli: [false, 'Start CLI mode', false, false],
		number: ['n', 'Number of results from range 1-100', 'number', 5],
		keyword: [false, 'Keyword to search', 'string', 'tom'],
		location: ['l', 'Path to folder where to store downloaded images', 'path', 'downloads']
	});

	cli.main(function (args, options) {
		var onDone = function () {
			googleImages.downloadImages(options.location, function () {
				process.exit(0);
			});
		};

		googleImages.init(options.keyword, options.number, onDone, function (progress) {
			cli.progress(progress);
		});

	});

} else {
	// WEB server
	var app = require('../app');
	var debug = require('debug')('node-Vyzva:server');
	var http = require('http');

	//noinspection JSUnresolvedVariable
	var port = normalizePort(process.env.PORT || '3000');
	app.set('port', port);

	/**
	 * Create HTTP server.
	 */

	var server = http.createServer(app);

	/**
	 * Listen on provided port, on all network interfaces.
	 */

	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);

	/**
	 * Normalize a port into a number, string, or false.
	 */

	function normalizePort(val) {
		var port = parseInt(val, 10);

		if (isNaN(port)) {
			// named pipe
			return val;
		}

		if (port >= 0) {
			// port number
			return port;
		}

		return false;
	}

	/**
	 * Event listener for HTTP server "error" event.
	 */

	function onError(error) {
		if (error.syscall !== 'listen') {
			throw error;
		}

		var bind = typeof port === 'string'
			? 'Pipe ' + port
			: 'Port ' + port;

		// handle specific listen errors with friendly messages
		switch (error.code) {
			case 'EACCES':
				console.error(bind + ' requires elevated privileges');
				process.exit(1);
				break;
			case 'EADDRINUSE':
				console.error(bind + ' is already in use');
				process.exit(1);
				break;
			default:
				throw error;
		}
	}

	/**
	 * Event listener for HTTP server "listening" event.
	 */

	function onListening() {
		var addr = server.address();
		var bind = typeof addr === 'string'
			? 'pipe ' + addr
			: 'port ' + addr.port;
		debug('Listening on ' + bind);
	}
}
